"""
Generate JavaScript arrays from local image folders

This script scans folders containing downloaded Instagram images
and generates the JavaScript arrays needed for the web app.

Usage:
    1. Download images manually from Instagram
    2. Place them in folders: images/account_a/ and images/account_b/
    3. Run: python generate_urls_from_folder.py
"""

import os
import json

def scan_folder_for_images(folder_path):
    """Scan a folder and return all image file paths"""
    if not os.path.exists(folder_path):
        print(f"Warning: Folder '{folder_path}' does not exist")
        return []

    # Common image extensions
    image_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp'}

    image_files = []
    for filename in os.listdir(folder_path):
        ext = os.path.splitext(filename)[1].lower()
        if ext in image_extensions:
            # Use forward slashes for web compatibility
            relative_path = f"{folder_path}/{filename}".replace('\\', '/')
            image_files.append(relative_path)

    return sorted(image_files)


def generate_javascript_array(image_paths, variable_name):
    """Generate JavaScript array code"""
    js_code = f"const {variable_name} = [\n"
    for path in image_paths:
        js_code += f"    '{path}',\n"
    js_code += "];\n"
    return js_code


def main():
    print("=" * 70)
    print("Generate Photo URLs from Local Folders")
    print("=" * 70)

    # Configuration
    folder_a = "photos_heartlands.studio"
    folder_b = "photos_storytellers.studio"

    # Scan folders
    print(f"\nScanning folders...")
    images_a = scan_folder_for_images(folder_a)
    images_b = scan_folder_for_images(folder_b)

    print(f"Found {len(images_a)} images in '{folder_a}'")
    print(f"Found {len(images_b)} images in '{folder_b}'")

    if not images_a and not images_b:
        print("\n" + "=" * 70)
        print("ERROR: No images found!")
        print("=" * 70)
        print("\nPlease:")
        print(f"1. Create folders: {folder_a} and {folder_b}")
        print("2. Download Instagram images manually to these folders")
        print("3. Run this script again")
        print("\nSee 'download_images_manually.md' for instructions")
        print("=" * 70)
        return

    # Generate JavaScript code
    output = "// Auto-generated photo arrays\n"
    output += "// Generated by generate_urls_from_folder.py\n\n"

    if images_a:
        output += generate_javascript_array(images_a, "ACCOUNT_A_PHOTOS")
        output += "\n"

    if images_b:
        output += generate_javascript_array(images_b, "ACCOUNT_B_PHOTOS")

    # Save to file
    output_file = "photo_arrays.js"
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(output)

    print(f"\n[OK] JavaScript arrays saved to '{output_file}'")

    # Also update script.js directly
    if images_a and images_b:
        update_script_js(images_a, images_b)

    print("\n" + "=" * 70)
    print("SUCCESS!")
    print("=" * 70)
    print("\nYour photo arrays are ready!")
    print(f"\nOption 1: Copy from '{output_file}' to script.js")
    print("Option 2: script.js has been updated automatically (if both folders have images)")
    print("\nYou can now open index.html in your browser!")
    print("=" * 70)


def update_script_js(images_a, images_b):
    """Update script.js with new photo arrays"""
    script_path = "script.js"

    if not os.path.exists(script_path):
        print(f"\nWarning: {script_path} not found, skipping auto-update")
        return

    try:
        with open(script_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # Generate new arrays
        new_array_a = generate_javascript_array(images_a, "ACCOUNT_A_PHOTOS")
        new_array_b = generate_javascript_array(images_b, "ACCOUNT_B_PHOTOS")

        # Find and replace the arrays
        import re

        # Replace ACCOUNT_A_PHOTOS
        pattern_a = r'const ACCOUNT_A_PHOTOS = \[[\s\S]*?\];'
        content = re.sub(pattern_a, new_array_a.strip(), content, count=1)

        # Replace ACCOUNT_B_PHOTOS
        pattern_b = r'const ACCOUNT_B_PHOTOS = \[[\s\S]*?\];'
        content = re.sub(pattern_b, new_array_b.strip(), content, count=1)

        # Save updated script
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(content)

        print(f"[OK] Updated {script_path} automatically")

    except Exception as e:
        print(f"\nWarning: Could not auto-update script.js: {e}")
        print("Please copy the arrays from photo_arrays.js manually")


if __name__ == "__main__":
    main()
